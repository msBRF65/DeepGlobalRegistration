diff --git a/demo.py b/demo.py
index 604b5a1..c991ef1 100644
--- a/demo.py
+++ b/demo.py
@@ -11,6 +11,8 @@ import open3d as o3d
 from core.deep_global_registration import DeepGlobalRegistration
 from config import get_config
 
+import pyplotlib.pyplot as plt
+
 BASE_URL = "http://node2.chrischoy.org/data/"
 DOWNLOAD_LIST = [
     (BASE_URL + "datasets/registration/", "redkitchen_000.ply"),
@@ -40,9 +42,16 @@ if __name__ == '__main__':
   dgr = DeepGlobalRegistration(config)
   T01 = dgr.register(pcd0, pcd1)
 
-  o3d.visualization.draw_geometries([pcd0, pcd1])
+  vis = o3d.visualization.Visualizer()
+  vis.add_geometries([pcd0, pcd1])
+  vis.capture_screen_float_buffer(False)
+  plg.imsave("./before.png")
 
   pcd0.transform(T01)
   print(T01)
 
   o3d.visualization.draw_geometries([pcd0, pcd1])
+  vis = o3d.visualization.Visualizer()
+  vis.add_geometries([pcd0, pcd1])
+  vis.capture_screen_float_buffer(False)
+  plg.imsave("./after.png")
\ No newline at end of file
diff --git a/exec.sh b/exec.sh
index 84d9e31..e3bf4b0 100755
--- a/exec.sh
+++ b/exec.sh
@@ -1,5 +1,5 @@
 #!/bin/sh
-APPDIR=`dirname $0`
-pip install -r $APPDIR/requirements.txt --user
+pip install --upgrade pip>=20.3 --user
+pip install -r /repo/requirements.txt --user
 
-python -u demo.py
+python -u /repo/demo.py
diff --git a/model/pyramidnet.py b/model/pyramidnet.py
index 8a0b9aa..0a643e3 100644
--- a/model/pyramidnet.py
+++ b/model/pyramidnet.py
@@ -15,7 +15,7 @@ from model.residual_block import get_block, conv, conv_tr, conv_norm_non
 class PyramidModule(ME.MinkowskiNetwork):
   NONLINEARITY = 'ELU'
   NORM_TYPE = 'BN'
-  REGION_TYPE = ME.RegionType.HYPERCUBE
+  REGION_TYPE = ME.RegionType.HYPER_CUBE
 
   def __init__(self,
                inc,
@@ -93,7 +93,7 @@ class PyramidNet(ME.MinkowskiNetwork):
   DEPTHS = [1, 1, 1, 1]
   # None        b1, b2, b3, btr3, btr2
   #               1  2  3 -3 -2 -1
-  REGION_TYPE = ME.RegionType.HYPERCUBE
+  REGION_TYPE = ME.RegionType.HYPER_CUBE
 
   # To use the model, must call initialize_coords before forward pass.
   # Once data is processed, call clear to reset the model before calling initialize_coords
diff --git a/model/residual_block.py b/model/residual_block.py
index f933be5..a2730b1 100644
--- a/model/residual_block.py
+++ b/model/residual_block.py
@@ -22,7 +22,7 @@ def conv(in_channels,
          dimension=3):
   if not isinstance(region_type, ME.RegionType):
     if region_type == 0:
-      region_type = ME.RegionType.HYPERCUBE
+      region_type = ME.RegionType.HYPER_CUBE
     elif region_type == 1:
       region_type = ME.RegionType.HYPERCROSS
     else:
@@ -50,7 +50,7 @@ def conv_tr(in_channels,
             stride=1,
             dilation=1,
             has_bias=False,
-            region_type=ME.RegionType.HYPERCUBE,
+            region_type=ME.RegionType.HYPER_CUBE,
             dimension=-1):
   assert dimension > 0, 'Dimension must be a positive integer'
   kernel_generator = ME.KernelGenerator(
@@ -174,7 +174,7 @@ def conv_norm_non(inc,
                   stride,
                   dimension,
                   bn_momentum=0.05,
-                  region_type=ME.RegionType.HYPERCUBE,
+                  region_type=ME.RegionType.HYPER_CUBE,
                   norm_type='BN',
                   nonlinearity='ELU'):
   return nn.Sequential(
diff --git a/model/resunet.py b/model/resunet.py
index 831517f..7e69567 100644
--- a/model/resunet.py
+++ b/model/resunet.py
@@ -18,7 +18,7 @@ class ResUNet(ME.MinkowskiNetwork):
   BLOCK_NORM_TYPE = 'BN'
   CHANNELS = [None, 32, 64, 128]
   TR_CHANNELS = [None, 32, 64, 64]
-  REGION_TYPE = ME.RegionType.HYPERCUBE
+  REGION_TYPE = ME.RegionType.HYPER_CUBE
 
   # To use the model, must call initialize_coords before forward pass.
   # Once data is processed, call clear to reset the model before calling initialize_coords
@@ -213,7 +213,7 @@ class ResUNetSP(ME.MinkowskiNetwork):
   # None        b1, b2, b3, btr3, btr2
   #               1  2  3 -3 -2 -1
   DEPTHS = [None, 1, 1, 1, 1, 1, None]
-  REGION_TYPE = ME.RegionType.HYPERCUBE
+  REGION_TYPE = ME.RegionType.HYPER_CUBE
 
   # To use the model, must call initialize_coords before forward pass.
   # Once data is processed, call clear to reset the model before calling initialize_coords
@@ -421,7 +421,7 @@ class ResUNet2(ME.MinkowskiNetwork):
   BLOCK_NORM_TYPE = 'BN'
   CHANNELS = [None, 32, 64, 128, 256]
   TR_CHANNELS = [None, 32, 64, 64, 128]
-  REGION_TYPE = ME.RegionType.HYPERCUBE
+  REGION_TYPE = ME.RegionType.HYPER_CUBE
 
   # To use the model, must call initialize_coords before forward pass.
   # Once data is processed, call clear to reset the model before calling initialize_coords
@@ -699,7 +699,7 @@ class ResUNet2v2(ME.MinkowskiNetwork):
   # None        b1, b2, b3, b4, btr4, btr3, btr2
   #               1  2  3  4,-4,-3,-2,-1
   DEPTHS = [None, 1, 1, 1, 1, 1, 1, 1, None]
-  REGION_TYPE = ME.RegionType.HYPERCUBE
+  REGION_TYPE = ME.RegionType.HYPER_CUBE
 
   # To use the model, must call initialize_coords before forward pass.
   # Once data is processed, call clear to reset the model before calling initialize_coords
@@ -977,7 +977,7 @@ class ResUNet2SP(ME.MinkowskiNetwork):
   BLOCK_NORM_TYPE = 'BN'
   CHANNELS = [None, 32, 64, 128, 256]
   TR_CHANNELS = [None, 32, 64, 64, 128]
-  REGION_TYPE = ME.RegionType.HYPERCUBE
+  REGION_TYPE = ME.RegionType.HYPER_CUBE
 
   # To use the model, must call initialize_coords before forward pass.
   # Once data is processed, call clear to reset the model before calling initialize_coords
@@ -1002,7 +1002,7 @@ class ResUNet2SP(ME.MinkowskiNetwork):
         stride=1,
         dilation=1,
         has_bias=False,
-        region_type=ME.RegionType.HYPERCUBE,
+        region_type=ME.RegionType.HYPER_CUBE,
         dimension=D)
     self.norm1 = get_norm(NORM_TYPE, CHANNELS[1], bn_momentum=bn_momentum, dimension=D)
 
@@ -1062,7 +1062,7 @@ class ResUNet2SP(ME.MinkowskiNetwork):
         stride=1,
         dilation=1,
         has_bias=False,
-        region_type=ME.RegionType.HYPERCUBE,
+        region_type=ME.RegionType.HYPER_CUBE,
         dimension=D)
     self.norm4 = get_norm(NORM_TYPE, CHANNELS[4], bn_momentum=bn_momentum, dimension=D)
 
@@ -1071,7 +1071,7 @@ class ResUNet2SP(ME.MinkowskiNetwork):
         CHANNELS[4],
         CHANNELS[4],
         bn_momentum=bn_momentum,
-        region_type=ME.RegionType.HYPERCUBE,
+        region_type=ME.RegionType.HYPER_CUBE,
         dimension=D)
 
     self.conv4_tr = conv_tr(
@@ -1081,7 +1081,7 @@ class ResUNet2SP(ME.MinkowskiNetwork):
         stride=2,
         dilation=1,
         has_bias=False,
-        region_type=ME.RegionType.HYPERCUBE,
+        region_type=ME.RegionType.HYPER_CUBE,
         dimension=D)
     self.norm4_tr = get_norm(
         NORM_TYPE, TR_CHANNELS[4], bn_momentum=bn_momentum, dimension=D)
